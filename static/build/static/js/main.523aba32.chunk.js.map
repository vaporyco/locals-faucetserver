{"version":3,"sources":["FaucetInfo/FaucetInfo.js","FaucetRequest/FaucetRequest.js","config.js","App.js","registerServiceWorker.js","index.js"],"names":["FaucetInfo","_this","Object","classCallCheck","this","_super","call","state","faucetinfo","_this2","axios","get","config","then","response","data","vaporscanlink","vaporscanroot","account","setState","localStorage","setItem","catch","error","console","log","navigator","onLine","f","JSON","parse","getItem","e","react_default","a","createElement","className","payoutamountinvapor","payoutfrequencyinsec","queuesize","target","href","number_format_default","value","Math","floor","balance","displayType","thousandSeparator","suffix","Component","FaucetRequest","props","targetAccount","requestrunning","handleChange","bind","assertThisInitialized","handleSubmit","clearMessages","event","faucetresponse","fauceterror","Vap","isAddress","apiUrl","status","address","amount","txhash","t","timespan","TimeSpan","duration","message","preventDefault","_this3","window","addEventListener","urlTail","location","search","substring","web3","_ref","type","vap","vapory","postMessage","currentProvider","accounts","onSubmit","placeholder","onChange","disabled","onClick","hours","minutes","apiurl","set","configuration","App","src_FaucetRequest_FaucetRequest","src_FaucetInfo_FaucetInfo","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","concat","fetch","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.523aba32.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./FaucetInfo.css\";\nimport axios from \"axios\";\nimport NumberFormat from \"react-number-format\";\nimport config from \"react-global-configuration\";\n\nclass FaucetInfo extends Component {\n  // Adds a class constructor that assigns the initial state values:\n  constructor() {\n    super();\n    this.state = {\n      faucetinfo: null\n    };\n  }\n  // This is called when an instance of a component is being created and inserted into the DOM.\n  componentWillMount() {\n    axios\n      .get(config.get(\"apiurl\") + \"/faucetinfo\")\n      .then(response => {\n        response.data.vaporscanlink =\n          response.data.vaporscanroot + \"/address/\" + response.data.account;\n        this.setState({ faucetinfo: response.data });\n        localStorage.setItem(\"faucetinfo\", response.data);\n      })\n      // Catch any error here\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  componentDidMount() {\n    if (!navigator.onLine) {\n      try {\n        let f = JSON.parse(localStorage.getItem(\"faucetinfo\"));\n        this.setState({ faucetinfo: f });\n      } catch (e) {\n        //\n      }\n    }\n  }\n\n  // The render method contains the JSX code which will be compiled to HTML.\n  render() {\n    if (!this.state.faucetinfo) return null;\n    return (\n      <section className=\"section\">\n        <div className=\"content has-text-centered has-text-weight-light has-text-grey-light\">\n          <p>\n            This faucet drips {this.state.faucetinfo.payoutamountinvapor} Vapor\n            every {this.state.faucetinfo.payoutfrequencyinsec} seconds. You can\n            register your account in our queue. Max queue size is currently{\" \"}\n            {this.state.faucetinfo.queuesize}. Serving from account{\" \"}\n            <a target=\"_new\" href={this.state.faucetinfo.vaporscanlink}>\n              {this.state.faucetinfo.account}\n            </a>\n            ( balance{\" \"}\n            <NumberFormat\n              value={Math.floor(this.state.faucetinfo.balance)}\n              displayType={\"text\"}\n              thousandSeparator={true}\n              suffix={\" VAP\"}\n            />\n            ).\n          </p>\n          <p>\n            Example command line: wget {config.get(\"apiurl\")}\n            /donate/&lt;your vapory address&gt; <br />\n            <a\n              target=\"_new\"\n              href=\"https://github.com/vaporyco/locals-faucetserver#api\"\n            >\n              API docs\n            </a>\n          </p>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default FaucetInfo;\n","import React, { Component } from \"react\";\nimport \"./FaucetRequest.css\";\nimport Vap from \"vapjs\";\nimport config from \"react-global-configuration\";\nimport axios from \"axios\";\nimport timespan from \"timespan\";\n\nclass FaucetRequest extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { targetAccount: \"\", requestrunning: false };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.clearMessages = this.clearMessages.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ targetAccount: event.target.value });\n  }\n\n  clearMessages(event) {\n    this.setState({ faucetresponse: null, fauceterror: null });\n  }\n\n  handleSubmit(event) {\n    this.clearMessages();\n    if (Vap.isAddress(this.state.targetAccount)) {\n      this.setState({ requestrunning: true });\n\n      let apiUrl = config.get(\"apiurl\") + \"/donate/\" + this.state.targetAccount;\n      axios\n        .get(apiUrl)\n        .then(response => {\n          this.setState({ requestrunning: false });\n          if (response.status === 200) {\n            this.setState({\n              faucetresponse: {\n                address: response.data.address,\n                amount: response.data.amount,\n                txhash: response.data.txhash,\n                vaporscanlink:\n                  config.get(\"vaporscanroot\") + \"/tx/\" + response.data.txhash\n              }\n            });\n            return;\n          }\n        })\n        // Catch any error here\n        .catch(error => {\n          this.setState({ requestrunning: false });\n          if (!error || !error.response) {\n            this.setState({\n              fauceterror: {\n                message: 'Error connecting to the API: ' + error.message,\n              }\n            });\n            return;\n          }\n          if (error.response.status === 403) {\n            let t = new timespan.TimeSpan(error.response.data.duration, 0, 0);\n            this.setState({\n              fauceterror: {\n                message: error.response.data.message,\n                duration: error.response.data.duration,\n                timespan: t\n              }\n            });\n            return;\n          }\n        });\n    } else {\n      this.setState({ fauceterror: { message: \"invalid address\" } });\n    }\n    event.preventDefault();\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"load\", () => {\n      // See if there is a pubkey on the URL\n      let urlTail = window.location.search.substring(1);\n      if (Vap.isAddress(urlTail)){\n        this.setState({ targetAccount: urlTail });\n        return;\n      }\n\n      // If web3 is not injected (modern browsers)...\n      if (typeof window.web3 === \"undefined\") {\n        // Listen for provider injection\n        window.addEventListener(\"message\", ({ data }) => {\n          if (data && data.type && data.type === \"VAPORY_PROVIDER_SUCCESS\") {\n            this.vap = new Vap(window.vapory);\n          }\n        });\n        // Request provider\n        window.postMessage({ type: \"VAPORY_PROVIDER_REQUEST\" }, \"*\");\n      }\n      // If web3 is injected (legacy browsers)...\n      else {\n        this.vap = new Vap(window.web3.currentProvider);\n        this.vap\n          .accounts()\n          .then(accounts => {\n            if (accounts && accounts[0]) {\n              this.setState({ targetAccount: accounts[0] });\n            }\n          })\n          .catch(() => {});\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"\">\n        <section className=\"section\">\n          <div className=\"container bottompadding\">\n            <form onSubmit={this.handleSubmit}>\n              <div className=\"field\">\n                <label className=\"label\">\n                  Enter your vapory account address\n                </label>\n                <div className=\"control\">\n                  <input\n                    className=\"input is-primary\"\n                    type=\"text\"\n                    placeholder=\"Enter your vapory account address\"\n                    value={this.state.targetAccount}\n                    onChange={this.handleChange}\n                  />\n                </div>\n              </div>\n              <div className=\"field is-grouped\">\n                <div className=\"control\">\n                  <button\n                    disabled={this.state.requestrunning}\n                    className=\"button is-link\"\n                  >\n                    Send me Vapor\n                  </button>\n                </div>\n              </div>\n            </form>\n          </div>\n          {this.state.requestrunning}\n\n          <div className=\"container\">\n            {this.state.faucetresponse ? (\n              <article\n                className=\"message is-success\"\n                onClick={this.clearMessages}\n              >\n                <div className=\"message-body\">\n                  <p>VAP sent to {this.state.faucetresponse.address}.</p>\n                  <p>\n                    Transaction hash{\" \"}\n                    <a\n                      target=\"_new\"\n                      href={this.state.faucetresponse.vaporscanlink}\n                    >\n                      {this.state.faucetresponse.txhash}\n                    </a>\n                  </p>\n                </div>\n              </article>\n            ) : (\n              <p />\n            )}\n            {this.state.fauceterror ? (\n              <article\n                className=\"message is-danger\"\n                onClick={this.clearMessages}\n              >\n                <div className=\"message-body\">\n                <b>{this.state.fauceterror.message}</b><br/>\n                  {this.state.fauceterror.timespan ? (\n                    <span>\n                      You are greylisted for another{\" \"}\n                      {this.state.fauceterror.timespan.hours} hours and{\" \"}\n                      {this.state.fauceterror.timespan.minutes} minutes.\n                    </span>\n                  ) : (\n                    <span />\n                  )}\n                </div>\n              </article>\n            ) : (\n              <p />\n            )}\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default FaucetRequest;\n","const config = {\n  apiurl: \"http://localhost:3008\",\n  vaporscanroot: \"https://vaporscan.com\"\n};\n\nexport default config;\n","// Import React and Component\nimport React, { Component } from \"react\";\nimport \"bulma/css/bulma.css\";\nimport \"./App.css\";\nimport FaucetInfo from \"./FaucetInfo/FaucetInfo\";\nimport FaucetRequest from \"./FaucetRequest/FaucetRequest\";\nimport config from \"react-global-configuration\";\nimport configuration from \"./config\";\n\nconfig.set(configuration);\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <section className=\"hero is-primary\">\n          <div className=\"hero-body\">\n            <div className=\"container\">\n              <h1 className=\"title\">Vapory Faucet</h1>\n            </div>\n          </div>\n        </section>\n        \n          <div className=\"container\">\n            <FaucetRequest />\n            <FaucetInfo />\n          </div>\n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}